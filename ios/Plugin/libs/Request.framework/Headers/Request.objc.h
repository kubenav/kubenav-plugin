// Objective-C API for talking to github.com/kubenav/bind/request Go package.
//   gobind -lang=objc github.com/kubenav/bind/request
//
// File is generated by gobind. Do not edit.

#ifndef __Request_H__
#define __Request_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class RequestAPIError;

@interface RequestAPIError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull kind;
@property (nonatomic) NSString* _Nonnull apiVersion;
@property (nonatomic) NSString* _Nonnull status;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) NSString* _Nonnull reason;
@property (nonatomic) long code;
@end

/**
 * AWSGetClusters returns all EKS clusters from AWS.
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestAWSGetClusters(NSString* _Nullable accessKeyId, NSString* _Nullable secretAccessKey, NSString* _Nullable region, NSError* _Nullable* _Nullable error);

/**
 * AWSGetToken returns a bearer token for Kubernetes API requests.
See: https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/7547c74e660f8d34d9980f2c69aa008eed1f48d0/pkg/token/token.go#L310
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestAWSGetToken(NSString* _Nullable accessKeyId, NSString* _Nullable secretAccessKey, NSString* _Nullable region, NSString* _Nullable clusterID, NSError* _Nullable* _Nullable error);

/**
 * AzureGetClusters return all Kubeconfigs for all AKS clusters for the provided subscription and resource group.
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestAzureGetClusters(NSString* _Nullable subscriptionID, NSString* _Nullable clientID, NSString* _Nullable clientSecret, NSString* _Nullable tenantID, NSString* _Nullable resourceGroupName, BOOL admin, NSError* _Nullable* _Nullable error);

/**
 * Do runs the given HTTP request.
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestDo(NSString* _Nullable method, NSString* _Nullable url, NSString* _Nullable body, NSString* _Nullable certificateAuthorityData, NSString* _Nullable clientCertificateData, NSString* _Nullable clientKeyData, NSString* _Nullable token, NSString* _Nullable username, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * OIDCGetAccessToken is used to retrieve an access token from a refresh token.
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestOIDCGetAccessToken(NSString* _Nullable discoveryURL, NSString* _Nullable clientID, NSString* _Nullable clientSecret, NSString* _Nullable redirectURL, NSString* _Nullable refreshToken, NSError* _Nullable* _Nullable error);

/**
 * OIDCGetLink returns the link for the configured OIDC provider. The Link can then be used by the user to login.
 */
FOUNDATION_EXPORT NSString* _Nonnull RequestOIDCGetLink(NSString* _Nullable discoveryURL, NSString* _Nullable clientID, NSString* _Nullable clientSecret, NSString* _Nullable redirectURL, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull RequestOIDCGetRefreshToken(NSString* _Nullable discoveryURL, NSString* _Nullable clientID, NSString* _Nullable clientSecret, NSString* _Nullable redirectURL, NSString* _Nullable code, NSError* _Nullable* _Nullable error);

#endif
